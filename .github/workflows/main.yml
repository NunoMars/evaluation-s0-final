name: Deploy the app in LXD containers

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted
    env:
      LB_CONTAINER_NAME: "lb-container"
      APP_CONTAINER_1_NAME: "app-container-1"
      APP_CONTAINER_2_NAME: "app-container-2"
      DB_CONTAINER_NAME: "db-pcontainer"
      DNS_CONTAINER_NAME: "dns-container"
      FIREWALL_CONTAINER_NAME: "firewall-container"

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up LXD
      run: |
        # Check if LXD is installed
        if ! command -v lxd &> /dev/null; then
          # Install LXD via snap
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S snap install lxd --channel=latest/stable

          # Wait for the LXD socket to be ready
          until [ -e /var/snap/lxd/common/lxd/unix.socket ]; do sleep 1; done

          # Initialize LXD with explicit configuration
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxd init --auto --storage-backend=dir --storage-pool=default
        fi
#   - name: Supprimer tous les containeurs
#      run: |
#       echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc stop ${LB_CONTAINER_NAME}
#       echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc delete ${LB_CONTAINER_NAME}
#       echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc stop ${APP_CONTAINER_1_NAME}
#       echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc delete ${APP_CONTAINER_1_NAME}
#       echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc stop ${APP_CONTAINER_2_NAME}
#       echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc delete ${APP_CONTAINER_2_NAME}
#       echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc stop ${DB_CONTAINER_NAME}
#       echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc delete ${DB_CONTAINER_NAME}
#       echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc stop ${DNS_CONTAINER_NAME}
#       echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc delete ${DNS_CONTAINER_NAME}
#       echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc stop ${FIREWALL_CONTAINER_NAME}
#       echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc delete ${FIREWALL_CONTAINER_NAME}
#     continue-on-error: true

#    - name: Create or Start app-container-1
#      run: |
#        if echo "${{ secrets.SUDO_PASSWORD }}" | sudo lxc info ${APP_CONTAINER_1_NAME} &> /dev/null; then
#          echo "app-container-1 already exists. Starting..."
#          sudo lxc start ${APP_CONTAINER_1_NAME}
#        else
#          echo "Creating app-container-1"
#          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc launch ubuntu:20.04 ${APP_CONTAINER_1_NAME}
#        fi
#      continue-on-error: true

    - name: Get App Container 1 IP
      id: app1_ip
      run: echo "::set-output name=ip::$(sudo lxc list --format json | jq -r '.[] | select(.name=="'${APP_CONTAINER_1_NAME}'") | .state.network.eth0.addresses[0].address')"

    - name: Deploy Application to app-container-1
      run: |
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc exec ${APP_CONTAINER_1_NAME} -- bash -c '
          rm -rf /home/ubuntu/evaluation-s07-final && \
          git clone https://github.com/NunoMars/evaluation-s07-final.git /home/ubuntu/evaluation-s07-final && \
          python3 -m venv /home/ubuntu/evaluation-s07-final/venv && \
          source /home/ubuntu/evaluation-s07-final/venv/bin/activate && \
          pip install -r /home/ubuntu/evaluation-s07-final/requirements.txt && \
          python /home/ubuntu/evaluation-s07-final/manage.py migrate && \
          echo "[Unit]" > /etc/systemd/system/site_tarot_gunicorn.service && \
          echo "Description=gunicorn daemon for site_tarot" >> /etc/systemd/system/site_tarot_gunicorn.service && \
          echo "" >> /etc/systemd/system/site_tarot_gunicorn.service && \
          echo "[Service]" >> /etc/systemd/system/site_tarot_gunicorn.service && \
          echo "User=root" >> /etc/systemd/system/site_tarot_gunicorn.service && \
          echo "ExecStart=/bin/bash -c '\''/home/ubuntu/evaluation-s07-final/venv/bin/gunicorn --workers=3 --bind 0.0.0.0:8000 site_tarot.wsgi:application'\''" >> /etc/systemd/system/site_tarot_gunicorn.service && \
          echo "" >> /etc/systemd/system/site_tarot_gunicorn.service && \
          echo "[Install]" >> /etc/systemd/system/site_tarot_gunicorn.service && \
          echo "WantedBy=multi-user.target" >> /etc/systemd/system/site_tarot_gunicorn.service && \
          systemctl enable site_tarot_gunicorn && \
          systemctl start site_tarot_gunicorn && \
          systemctl status site_tarot_gunicorn
        '
      continue-on-error: true 
      
#   # - name: Create or Start app-container-2
#   #  run: |
#   #    if echo "${{ secrets.SUDO_PASSWORD }}" | sudo lxc info ${APP_CONTAINER_2_NAME} &> /dev/null; then
#   #      echo "app-container-2 already exists. Starting..."
#   #      sudo lxc start ${APP_CONTAINER_2_NAME}
#   #    else
#   #      echo "Creating app-container-2"
#   #      echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc launch ubuntu:20.04 ${APP_CONTAINER_2_NAME}
#   #    fi
#   #  continue-on-error: true
    
    - name: Get App Container 2 IP
      id: app2_ip
      run: echo "::set-output name=ip::$(sudo lxc list --format json | jq -r '.[] | select(.name=="'${APP_CONTAINER_2_NAME}'") | .state.network.eth0.addresses[0].address')"

    - name: Deploy Application to app-container-2
      run: |
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc exec ${APP_CONTAINER_2_NAME} -- bash -c '
          rm -rf evaluation-s07-final && \
          git clone https://github.com/NunoMars/evaluation-s07-final.git && \
          python3 -m venv evaluation-s07-final/venv && \
          /bin/bash -c "source evaluation-s07-final/venv/bin/activate && pip install -r evaluation-s07-final/requirements.txt && python evaluation-s07-final/manage.py migrate" && \
          echo "[Unit]" > /etc/systemd/system/site_tarot_gunicorn.service && \
          echo "Description=gunicorn daemon for site_tarot" >> /etc/systemd/system/site_tarot_gunicorn.service && \
          echo "" >> /etc/systemd/system/site_tarot_gunicorn.service && \
          echo "[Service]" >> /etc/systemd/system/site_tarot_gunicorn.service && \
          echo "User=root" >> /etc/systemd/system/site_tarot_gunicorn.service && \
          echo "ExecStart=/bin/bash -c '\''evaluation-s07-final/venv/bin/gunicorn --workers=3 --bind 0.0.0.0:8000 site_tarot.wsgi:application'\''" >> /etc/systemd/system/site_tarot_gunicorn.service && \
          echo "" >> /etc/systemd/system/site_tarot_gunicorn.service && \
          echo "[Install]" >> /etc/systemd/system/site_tarot_gunicorn.service && \
          echo "WantedBy=multi-user.target" >> /etc/systemd/system/site_tarot_gunicorn.service && \
          systemctl enable site_tarot_gunicorn && \
          systemctl start site_tarot_gunicorn && \
          systemctl status site_tarot_gunicorn
        '
    
      continue-on-error: true

#   - name: CrÃ©er et deploy load balancer
#     run: |
#       if echo "${{ secrets.SUDO_PASSWORD }}" | sudo lxc info ${LB_CONTAINER_NAME} &> /dev/null; then
#         echo "lb-container already exists. Starting..."
#         sudo lxc start ${LB_CONTAINER_NAME}
#       else
#         echo "Creating lb-container"
#         echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc launch ubuntu:20.04 ${LB_CONTAINER_NAME}
#       fi
#     continue-on-error: true 
        
    - name: Get Load Balancer IP
      id: lb_ip
      run: echo "::set-output name=ip::$(sudo lxc list --format json | jq -r '.[] | select(.name=="'${LB_CONTAINER_NAME}'") | .state.network.eth0.addresses[0].address')"

    - name: Deploy Load Balancer (Nginx)
      run: |
        LB_IP="${{ steps.lb_ip.outputs.ip }}"
        APP1_IP="${{ steps.app1_ip.outputs.ip }}"
        APP2_IP="${{ steps.app2_ip.outputs.ip }}"
    
        # Create the Nginx configuration directory if it doesn't exist
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S mkdir -p /etc/nginx/sites-available
    
        # Create the Nginx configuration file
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S bash -c 'touch /etc/nginx/sites-available/default'
    
        # Configure Nginx
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S bash -c '
          echo "server {" > /etc/nginx/sites-available/default
          echo "    listen 80;" >> /etc/nginx/sites-available/default
          echo "    server_name nunomars-server.cloud;" >> /etc/nginx/sites-available/default
          echo "" >> /etc/nginx/sites-available/default
          echo "    location / {" >> /etc/nginx/sites-available/default
          echo "        proxy_pass http://'$APP1_IP':8000 http://'$APP2_IP':8000;" >> /etc/nginx/sites-available/default
          echo "        proxy_set_header Host $host;" >> /etc/nginx/sites-available/default
          echo "        proxy_set_header X-Real-IP $remote_addr;" >> /etc/nginx/sites-available/default
          echo "        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;" >> /etc/nginx/sites-available/default
          echo "        proxy_set_header X-Forwarded-Proto $scheme;" >> /etc/nginx/sites-available/default
          echo "    }" >> /etc/nginx/sites-available/default
          echo "}" >> /etc/nginx/sites-available/default
        '

        # Restart Nginx to apply changes
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc exec lb-container -- systemctl restart nginx
    
       
    - name: Create and deploy Database (MariaDB)
      run: |
        # Create the database container
        lxc launch ubuntu:20.04 ${DB_CONTAINER_NAME}
    
        # Update package information
        lxc exec ${DB_CONTAINER_NAME} -- sudo apt update && sudo apt upgrade -y
    
        # Install MariaDB server
        lxc exec ${DB_CONTAINER_NAME} -- sudo apt install -y mariadb-server
    
        # Secure MariaDB installation (set root password, remove anonymous users, etc.)
        lxc exec ${DB_CONTAINER_NAME} -- sudo mysql_secure_installation
    
        # Create a database and user
        lxc exec ${DB_CONTAINER_NAME} -- sudo mysql -uroot -p -e "CREATE DATABASE IF NOT EXISTS siteVoyance;"
        lxc exec ${DB_CONTAINER_NAME} -- sudo mysql -uroot -p -e "CREATE USER IF NOT EXISTS 'nuno'@'%' IDENTIFIED BY 'bcxau9p^^123.';"
        lxc exec ${DB_CONTAINER_NAME} -- sudo mysql -uroot -p -e "GRANT ALL PRIVILEGES ON siteVoyance.* TO 'nuno'@'%';"
        lxc exec ${DB_CONTAINER_NAME} -- sudo mysql -uroot -p -e "FLUSH PRIVILEGES;"
    
        # Allow connections to MariaDB from all IP addresses
        lxc exec ${DB_CONTAINER_NAME} -- bash -c 'echo "[mysqld]" > /etc/mysql/conf.d/bind-address.cnf'
        lxc exec ${DB_CONTAINER_NAME} -- bash -c 'echo "bind-address = 0.0.0.0" >> /etc/mysql/conf.d/bind-address.cnf'
    
        # Restart MariaDB to apply changes
        lxc exec ${DB_CONTAINER_NAME} -- sudo service mysql restart
      continue-on-error: true      

    - name: Create and Deploy DNS (BIND9)
      run: |
        # Configure BIND9 for the local zone
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc exec dns-container -- bash -c 'cat <<EOF > /etc/bind/named.conf.local
        zone "local" {
            type master;
            file "/etc/bind/db.local";
        };
        EOF'

        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc exec dns-container -- bash -c 'cat <<EOF > /etc/bind/db.local
        $TTL 86400
        @       IN      SOA     ns1.local. admin.local. (
                          2023112001      ; Serial
                          3600            ; Refresh
                          1800            ; Retry
                          604800          ; Expire
                          86400 )         ; Negative Cache TTL
            IN      NS      ns1.local.
        ns1     IN      A       192.168.1.10
        EOF'
        # Restart BIND9 to apply changes
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc exec dns-container -- systemctl restart bind9

    - name: Create and deploy Firewall (iptables)
      run: |
        # Create the firewall container
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc launch ubuntu:20.04 ${FIREWALL_CONTAINER_NAME}

        # Update package information
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc exec firewall-container -- apt update || { echo "Failed to update packages."; cat /etc/apt/sources.list; cat /etc/resolv.conf; exit 1; }

        # Create the directory if it doesn't exist
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc exec firewall-container -- mkdir -p /etc/iptables/

        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc exec firewall-container -- apt install iptables

        # Set up iptables rules
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc exec firewall-container -- iptables -A INPUT -p tcp --dport 22 -j ACCEPT
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc exec firewall-container -- iptables -A INPUT -p tcp --dport 80 -j ACCEPT
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc exec firewall-container -- iptables -A INPUT -p tcp --dport 443 -j ACCEPT
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc exec firewall-container -- iptables -A INPUT -j DROP

        # Save iptables rules to the file
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S lxc exec firewall-container -- iptables-save > /etc/iptables/rules.v4 || { echo "Failed to save rules to file."; exit 1; }
        
    - name: Configure LXD containers
      run: |

        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S -n lxc network attach lxdbr0 app-container-1 eth0
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S -n lxc network attach lxdbr0 app-container-2 eth0
        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S -n lxc network attach lxdbr0 db-postgresql eth0

        echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S -n lxc config device add lb-container lb-proxy proxy listen=tcp:0.0.0.0:80 connect=tcp:localhost:80
      continue-on-error: true